<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[提高Google搜索效率的小技巧]]></title>
    <url>%2F2018%2F11%2F07%2F%E6%8F%90%E9%AB%98Google%E6%90%9C%E7%B4%A2%E6%95%88%E7%8E%87%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[前言为了得到更加[多元化]的搜索结果，虽然Google在天朝访问起来并不是那么容易，但是其功能之强大让很多人搭梯子也要把它作为常用搜索引擎。 平日中我们使用最简单的关键词搜索之外，它还提供了更加精细化的搜索功能，如果之前你只是在搜索框中简单的输入关键词，甚至直接搜索[地铁X号线末班车是什么时候]，可以尝试下下面这些小技巧，让你比别人容易或得到想要的答案和精确的搜索结果。 另外牢记以下三点 “熟能生巧”，不要小看这些不起眼的搜索操作命令，说不定某个时候能帮上你大忙。 “实践出真知”，下面介绍的这些技巧尽量做实验自己尝试，体验一下才会印象深刻。 “温故而知新”，本文非常适合为搜索重度使用者提供便利，搜索引擎的高级使用者可以将它作为温习材料。 学会使用搜索运算符“再”次提起这些运算符，之所以说是”再”，因为这几个小技巧并不新鲜，很多都是和搜索引擎一起诞生的，甚至已经成为了各个搜索引擎的通用标准。鉴于仍然有很多人不知道这些搜索运算符，或者不知道他们到底能干什么，我们来介绍一下它们的正确使用姿势。 双引号(“”)：我就是要搜这些用双引号&quot;&quot;将需要完全匹配的字词引起 如果你很明确你想要找什么，给你的搜索关键词加上双引号，这样，搜索引擎会严格按照你输入的内容查找相关结果。比如你搜索输入的是 “砀山鸭梨 最好吃” ，Google就会严格按照关键词的先后顺序查找网页内容，只有[砀山鸭梨]先出现，[最好吃]后出现的内容才会出现在结果中，而像[最好吃的是砀山鸭梨]这种结果是不会出现的。 不妨我们来试试搜索[中国城市发展规划]的结果，加不加双引号的结果一下就能看出区别了了吧。 星号(*)：搜歌词神器用*号放在你需要匹配的字词两边 如果你搜索的内容中，有一些部分你不能完全确定，比如你在路边听到了某首歌，只记住了零星的歌词，或者是听别人口头跟你说的东西，但是没记住，只记得一些关键词，这个时候星号就派上用场了。 还记得当红遍大江南北的[骑李湘]么，你感觉听到了一句[爽歪的麻雀在电线杆上裸睡]，其实如果你搜索[*的麻雀在电线杆上*]还是能找到正确结果的。 短横(-)：排除你不想要的结果在不需要的字词前面添加一个 - 比如我们想要搜索[苹果]这种食物，但是随着iPhone和苹果公司的兴起，搜索出的结果已经全部被苹果手机所覆盖，这时候只需要调整一下搜索关键词为[苹果 -手机]，这样就可以找到只含有[苹果]，但是不包含[手机的结果了]。 学会使用操作命令Google提供了很多高级搜索操作，全部通过一些关键词实现，合理使用这些关键词也会给你的搜索结果带来极大帮助。 site: 指定你想要搜索的网站将site:网站域名 添加到搜索词 通过添加site关键词，你可以指定从哪个网站上搜索你想要的结果。很多网站的站内搜索是通过这种方式实现的，此方法可以说是神器，适用于各种网站的站内搜索，就连某度的网盘也是可以搜到的哦。 结合上面的短横(-)小技巧，可以写成[新闻 -site:qq.com]就变成了搜索除了腾讯以外网站的新闻。 filetype：搜索文件小能手将filetype:文件类型添加到搜索词 通过添加filetype关键词，你可以直接搜索相应的文件类型。这个用处非常大，比如搜索PPT模板时，很多网页都需要进入后再注册下载，显然这很麻烦。或者想搜索相应政府公文（一般都是pdf格式）你可以直接试试[智能制造 filetype:pdf]，这样的搜索关键词，找到的结果不是一个个网址，而是一系列PDF文件。 除此之外还有一些搜索运算符，但是使用的频率不高，感兴趣的可以前往这里自行了解。 intitle：减少搜索干扰项将intitle:关键词添加到搜索词 intitle指令返回的是页面title中包含的关键词页面。Google和baidu都支持intitle指令。只用intitle指令找到的是更准确的页面页面，如果关键词只出现在页面可见的文字中，而没有出现在title中，大部分情况是并没有针对关键词进行优化，使用这种方式就不适宜了，一般使用intitle的情况是在普通搜索干扰项过多的情况下，增加此条件，让搜索词只出现在标题中。 其他小技巧搜图助手:版权、以图搜图版权图片筛选在我们日常生活工作中，有时候需要从网上搜索一些图片作为素材，但这些图片有时候经过各个网站的转载，让人很难辨别是否存在版权问题。Google的图片搜索就可以解决这个问题。针对图片版权，这里有非常细分的筛选项。另外，正版图片并不是一定就是付费的，一些授权协议，CC0就是一种完全共享性的授权协议，可以直接使用图片或者进行二次修改。 以图搜图使用以图搜图，可以通过在页面的图片上点击右键菜单中的”通过Google搜索图片”，或者访问Google图片搜索从本地上传图片进行搜索、这个功能并不新鲜，而且baidu也是支持的 生活小助手：股票、计算器、查单词随手查股票Google可以帮你查看A股、港股、美股等各种股票，你只需要输入股票代码，不管是像A股的数字代码[600234]还是美股中的爸爸[BABA]，估价就会试试闪现。 随手计算器想打开Windows计算器？ win + R 然后 clac？ 不需要！直接在Google搜索栏中输入[计算器]，一个简易的科学计算器就出来了。就算你搜索一些数学函数表达式，Google甚至可以帮你直接用图形画出来 单位换算日常生活中，经常会遇到各种换算，如面积、温度、汇率等等，你可以直接输入你想换算的两个量，Google会自动提供换算功能。 查单词、翻译在搜索关键词前加上[定义]或[翻译]，Google就可以帮你查单词或做翻译。不过，如果Google使用的是中文语言，查单词就会直接使用wiki，这样会导致无论是释义还是词库都非常不完备。推荐使用英文语言的Google配合[define 关键词]，无论是释义还是词库都更加完善。 高级搜索说了这么多不知你记住了多少，其实没关系，Google已经提供了高级搜索页面进入高级搜索或按下图所示操作，包含了上述所有技巧。]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三星手机刷Recovery]]></title>
    <url>%2F2018%2F10%2F09%2F%E4%B8%89%E6%98%9F%E6%89%8B%E6%9C%BA%E5%88%B7Recovery%2F</url>
    <content type="text"><![CDATA[引言因为三星手机自带的Recovery功能过于鸡肋，想要对手机进行刷机就必须刷入第三方Recovery，只有第三方Recovery才能为各种卡刷ROM提供便利条件 进入与退出Recovery三星有众多机型，进入Recovery的方式也不太相同，但近几年三星出的S系列都是一样的 进入Recovery 关机状态下，同时按住 音量上 + Home键 + 电源键，在开机出现三星Logo时，三个键同时放开，稍等一下就进入Recovery模式了(部分机型需要一致按住这三个键，出现两次开机画面之后再松手) 退出Recovery 退出有两种方式，一种是通过音量上下键选择Recovery里面的菜单 reboot 即可，第二种是按住音量上 + Home键 + 电源键 即可强制退出 进入与退出恢复模式三星还提供了一种线刷模式(挖煤模式)，此模式可以救砖刷官方线刷包，还可以刷第三方Recovery 进入恢复模式 任何模式下，按住音量下键 + Home键 + 电源键，直到出现类似下方的界面，再按音量上，即为成功进入恢复模式 退出恢复模式 按音量下，即可退出恢复模式 准备工具上面学习了两种刷机模式后，下面开始进入刷Recovery的准备工作(下列工具可以从以下链接下载，此次Recovery针对S6系列) 1.三星手机驱动 2.第三方Recovery 3.Odin工具 三星手机驱动没啥好说的，右键管理员方式运行安装即可 第三方Recovery下载下来之后是一个tar包 Odin工具使用此工具前确保手机驱动成功安装，此工具解压后双击即可运行 刷入Recovery在准备工作都做好之后，打开Odin工具，手机进入恢复模式(操作见上方)，连接数据线至电脑，当Odin端口处变为蓝色时，代表手机正常连接电脑，一切准备就绪，如下图： 接下来点击AP按钮，选择刚刚下载的Recovery包，也就是那个TWRP开头的文件，如下图： 点击start，开始刷入，大概几秒钟后，左上角出现绿色表示刷入成功，此时手机会自动重启，接下来，关闭手机，按住音量下键 + Home键 + 电源键 重新开机到Logo刚出现时，松开全部按键，等待进入Recovery，如下图： 可以选择语言为中文，然后向右滑动滑块就进入Recovery咯，开启自由刷机之路]]></content>
      <categories>
        <category>手机</category>
      </categories>
      <tags>
        <tag>Recovery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring自定义标签-xsd]]></title>
    <url>%2F2018%2F09%2F10%2FSpring%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE-xsd%2F</url>
    <content type="text"><![CDATA[引言 从Spring2.0开始，Spring提供了XML Schema可扩展机制，用户可以自定义XML Schema文件，并自定义XML Bean解析器，并集成到Spring Ioc 容器中 在我们日常配置Spring的xml文件过程中，使用的标签都是spring定义好的，例如这种，我们也可以遵从spring对于XML Schema Definition(XSD)定义的文档，实现自定义XSD 实现自定义文档 大体就分为如下四个步骤 1.创建自定义的XML Schema文件(xsd) 2.自定义处理器(实现NamespaceHandler接口) 3.自定义解析器(实现BeanDefinitionParser接口，可实现多个) 4.注册到Spring的IOC中 1.创建自定义的XML Schema文件在classpath资源路径下加入文件(play.xsd)： 文件内容如下 12345678910111213141516171819&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;xsd:schema xmlns="http://zml1.github.io/play" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:beans="http://www.springframework.org/schema/beans" targetNamespace="http://zml1.github.io/play" elementFormDefault="qualified" attributeFormDefault="unqualified"&gt; &lt;xsd:import namespace="http://www.springframework.org/schema/beans"/&gt; &lt;xsd:element name="ball"&gt; &lt;xsd:complexType&gt; &lt;xsd:complexContent&gt; &lt;xsd:extension base="beans:identifiedType"&gt; &lt;xsd:attribute name="name" type="xsd:string" use="required"/&gt; &lt;xsd:attribute name="type" type="xsd:string" use="required"/&gt; &lt;xsd:attribute name="size" type="xsd:string" use="optional"/&gt; &lt;/xsd:extension&gt; &lt;/xsd:complexContent&gt; &lt;/xsd:complexType&gt; &lt;/xsd:element&gt;&lt;/xsd:schema&gt; 定义了命名空间为http://zml1.github.io/play，包含元素ball，有name,type和size属性，use代表是否必填 2.自定义处理器NamespaceHandlerNamespaceHandler用于解析刚刚定义好的XML Schema文件。我们可以看到此接口包含三个方法12345678public interface NamespaceHandler &#123; //在构造之后但在解析任何自定义元素之前由DefaultBeanDefinitionDocumentReader调用,负责初始化 void init(); //解析指定的Element并注册 BeanDefinition parse(Element var1, ParserContext var2); //解析指定的Node并装饰提供的BeanDefinitionHolder，返回装饰后的定义 BeanDefinitionHolder decorate(Node var1, BeanDefinitionHolder var2, ParserContext var3);&#125; Spring提供了一个默认的实现类NamespaceHandlerSupport,我们只需要在init的时候注册每个元素的解析器即可。12345public class BallNamespaceHandler extends NamespaceHandlerSupport &#123; public void init() &#123; registerBeanDefinitionParser("ball", new BallParser()); &#125;&#125; Spring在这里采用了设计模式中的委托模式，NamespaceHandlerSupport可以注册任意数量的BeanDefinitionParser(也就是BallParser)，而解析XML的工作委托给了BeanDefinitionParser(BallParser)负责。 3.自定义解析器BeanDefinitionParser在BeanDefinitionParser被调用时，如果在NamespapceHandler中已有对应注册的parser(例如上面的BallParser)就解析相应的属性设置到Bean中。下面使用的是自定义解析bean，当然可以继承AbstractSingleBeanDefinitionParser类来简化解析过程。 123456789101112131415161718public class BallParser implements BeanDefinitionParser &#123; @Override public BeanDefinition parse(Element element, ParserContext parserContext) &#123; String name = element.getAttribute("name"); String type = element.getAttribute("type"); String size = element.getAttribute("size"); //定义Bean RootBeanDefinition beanDefinition = new RootBeanDefinition(); beanDefinition.setBeanClass(Ball.class); beanDefinition.setLazyInit(false); beanDefinition.getPropertyValues().addPropertyValue("type", type); beanDefinition.getPropertyValues().addPropertyValue("size", size); parserContext.getRegistry().registerBeanDefinition(name, beanDefinition); return beanDefinition; &#125;&#125; 4.注册到Spring(handler和schema)在最开始我们看到在classpath资源路径下不仅有test.xsd,还有spring.handlers和spring.schemas这两个文件。这两个文件是为了让Spring在解析xml文件的时候能获取到咱们自定义的xsd。 spring.handlers spring.handlers文件包含了xml schema uri 和 Handler类的映射关系,在Spring的xml配置文件中出现http://zml1.github.io/play名空间的时候会交给BallNamespaceHandler来处理，key部分必须和xsd文件中的targetNamespace值保持一致,value是BallNamespaceHandler的包全路径 1http\://zml1.github.io/play=com.zml1.BallNamespaceHandler spring.schemas spring.schemas文件包含了xml schema xsd文件命名空间和文件路径的映射关系 1http\://zml1.github.io/schema/play.xsd=META-INF/play.xsd 至此自定义xsd已完成,下面我们加入Spring的配置文件spring.xml中使用 123456789101112&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:play="http://zml1.github.io/schema/play" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://zml1.github.io/schema/play http://zml1.github.io/schema/play.xsd"&gt; &lt;play:ball id="myBall" name="myname" type="football" size="big"/&gt;&lt;/beans&gt; 下面就可以通过@Autowires或context中获取bean使用咯。 123456789public class Main &#123; public static void main(String[] args) &#123; //启动spring ApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;); //从容器中取bean Ball ball = (Ball) context.getBean(&quot;myBall&quot;); System.out.println(ball.getName()); &#125;&#125; 输出结果：myname]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>xsd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java.lang.IllegalArgumentException:Can not set XXX to com.sun.proxy.$Proxy28]]></title>
    <url>%2F2018%2F07%2F10%2FCan-not-set-XXX-to-com-sun-proxy-Proxy28%2F</url>
    <content type="text"><![CDATA[最近Spring项目启动报错java.lang.IllegalArgumentException: Can not set XXX to com.sun.proxy.$Proxy28经过检查发现是使用 @Autowired 时，写在了接口的实现类上面，由于spring AOP动态代理是通过接口，如果不做配置的话一般情况使用的是Java原生的动态代理，所以注入地方都要通过接口进行注入，如果通过实现类进行注入就会报这个错代码如下： 1234public class MonitorService &#123; @Autowired private JobFlowService jobFlowService;&#125; 1234@Service("jobFlowService")public class JobFlowService implements IScheduleExecutor &#123; &#125; 有两种解决方案 1.在你的项目spring配置文件中添加一行配置: 1&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt; 强制让Spring使用cglib生成代理类，就可以通过接口的实现类上@Service等类似注解进行注入 2.更改代码，写成用接口注入如下： 1234public class MonitorService &#123; @Autowired private JobFlowServiceImpl jobFlowService;&#125;]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>proxy</tag>
        <tag>IllegalArgumentException</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shadowsocks安卓客户端（下载+配置）]]></title>
    <url>%2F2018%2F07%2F09%2FShadowsocks%E5%AE%89%E5%8D%93(Android)%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%88%E4%B8%8B%E8%BD%BD%E5%8F%8A%E9%85%8D%E7%BD%AE%EF%BC%89%2F</url>
    <content type="text"><![CDATA[软件准备首先，点击下方按钮下载安卓版的客户端 Shadowsocks 。 如果您是用微信打开的话，先点击手机右上角的三个点，然后选择手机自带的浏览器打开，这样才能下载成功。 官方提供了几个不同版本，根据你手机的cpu选择合适的apk安装包（如果你也不知道，那就选择结尾是universal的就好啦） 点我进入下载页 安装 Shadowsocks如果是手机下载的，可以用手机里的文件管理器，找到该 APK 安装；如果是电脑下载的，请导入到手机里进行安装。安装完毕手机桌面会出现一个叫“影梭”的 APP。这个“影梭”就是安卓版 Shadowsocks 的中文名字。 导入配置影梭首页和删除默认配置打开影梭，你看到的首页是这个样子。它会默认一个配置，这个配置是没有用的，可以左滑或者右滑删除掉。 添加新配置点击右上角的加号，选择”手动设置”。 如果安装了PC端的ss，也可以选择扫描二维码导入，非常方便 填写配置进入添加配置的设置界面后，按照下图所示，根据服务商给你提供的配置，依次填写。填写完毕后，点击右上角的对号✔️保存。 选中新加配置添加完毕返回到软件首页，注意看，首页有了你新添加的配置。注意，配置的最左侧是灰色的，说明未被使用，点击配置，最左侧变为绿色，说明使用该配置（如下图）。同时，如果发现配置填写错误，可以点击右侧的小铅笔再次编辑修改。 启动和关闭。右下角的小飞机即为开关按钮，如果处于灰色状态，说明是关闭中；可点击打开连接，打开即为绿色。 测试是否连接成功打开浏览器看看是否能上谷歌了。（强烈建议不要使用国产浏览器，尤其是华为小米自带的浏览器，此处推荐 Chrome，就算用国产的浏览器，推荐使用夸克或Via浏览器）。 最后，恭喜你，自由了。]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Https升级指南]]></title>
    <url>%2F2018%2F06%2F19%2Fhttps%E5%8D%87%E7%BA%A7%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[获取证书升级到https的第一步就是要先获取一张证书。证书是一个二进制文件，里面包含经过认证的网站公钥和一些元数据，要从经销商购买。 证书的概念 证书的概念：首先要有一个根证书，然后用根证书来签发服务器证书和客户证书。服务器证书和客户证书是平级关系。SSL必须安装 服务器证书来认证。 因此，在此环境中，至少必须有三个证书：根证书，服务器证书，客户端证书。 在生成证书之前，一般会有一个私钥，同时用私钥生成证书请求，再利用证书服务器的根证来签发证书。 SSL所使用的证书可以自己生成，也可以通过一个商业性CA（如Verisign 或 Thawte）签署证书。 签发证书的问题：如果使用的是商业证书，具体的签署方法请查看相关销售商的说明；如果是知己签发的证书，可以使用openssl自带的CA.sh 脚本工具。 认证级别证书有很多类型，分为三种认证级别： 域名认证（Domain Validation）：最低级别认证，可以确认申请人拥有这个域名。对于这种证书，浏览器会在地址栏显示一把锁。 公司认证（Company Validation）：确认域名所有人是哪一家公司，证书里面会包含公司信息。 扩展认证（Extended Validation）：最高级别的认证，浏览器地址栏会显示公司名。 域名认证： 公司认证/扩展认证： 覆盖范围 单域名证书：只能用于单一域名，google.com的证书不能用于www.google.com 通配符证书：可以用于某个域名及其所有一级子域名，比如*.google.com的证书可以用于google.com，也可以用于www.google.com 多域名证书：可以用于多个域名，比如google.com和github.com 认证级别越高覆盖范围越广，价格越美丽。 还有一个免费证书的选择。由 ISRG（Internet Security Research Group，互联网安全研究小组）提供服务，而 ISRG 是来自于美国加利福尼亚州的一个公益组织。Let’s Encrypt 得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛。 拿到证书以后，可以用 SSL Certificate Check 检查一下，信息是否正确。 安装证书根据上面的介绍，证书会有多个文件，可以统一放到你的web服务器路径/cert/(linux OS，windows看你自己心情了)下面，然后根据你web服务器的不同在下面的链接中选择适合你的配置： https://mozilla.github.io/server-side-tls/ssl-config-generator/ Mozilla的证书配置文件模板 https://github.com/SSLMate/tlsconfigguide/tree/master/templates SSLMate的证书配置文件模板 如果使用 Let’s Encrypt 证书，请使用自动安装工具 Certbot安装成功后，使用 SSL Labs Server Test 检查一下证书是否生效。 Nginx的写法在Nginx的安装目录下创建cert目录，并且将下载的全部文件拷贝到cert目录中。如果申请证书时是自己创建的CSR文件，请将对应的私钥文件放到cert目录下并且命名为214750710900222.key 打开 Nginx 安装目录下 conf 目录中的 nginx.conf 文件，找到： 12345678910111213141516# HTTPS server# #server &#123;# listen 443;# server_name localhost;# ssl on;# ssl_certificate cert.pem;# ssl_certificate_key cert.key;# ssl_session_timeout 5m;# ssl_protocols SSLv2 SSLv3 TLSv1;# ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;# ssl_prefer_server_ciphers on;# location / &#123;###&#125;#&#125; 将其修改为 (以下属性中ssl开头的属性与证书配置有直接关系，其它属性请结合自己的实际情况复制或调整) : 1234567891011121314151617server &#123; listen 443; server_name localhost; ssl on; root html; index index.html index.htm; ssl_certificate cert/214750710900222.pem; ssl_certificate_key cert/214750710900222.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / &#123; root html; index index.html index.htm; &#125;&#125; 保存退出。 重启 Nginx。 1nginx -s reload 通过 https 方式访问您的站点，测试站点证书的安装配置。 Apache的写法在Apache的安装目录下创建cert目录，并且将下载的全部文件拷贝到cert目录中。如果申请证书时是自己创建的CSR文件，请将对应的私钥文件放到cert目录下并且命名为214750710900222.key； 打开 apache 安装目录下 conf 目录中的 httpd.conf 文件，找到以下内容并去掉“#”： 12#LoadModule ssl_module modules/mod_ssl.so (如果找不到请确认是否编译过 openssl 插件)#Include conf/extra/httpd-ssl.conf 打开 apache 安装目录下 conf/extra/httpd-ssl.conf 文件 (也可能是conf.d/ssl.conf，与操作系统及安装方式有关)， 在配置文件中查找以下配置语句(一定要写进1&lt;VirtualHost *:443&gt;&lt;/VirtualHost&gt;标签里面): 1234567891011121314151617#申请证书的域名ServerName xxxxxxx.com#网站文件的根目录 DocumentRoot "C:\WWW\xxxxxx.com" SSLEngine on # 添加 SSL 协议支持协议，去掉不安全的协议SSLProtocol all -SSLv2 -SSLv3# 修改加密套件如下SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUMSSLHonorCipherOrder on# 证书公钥配置SSLCertificateFile cert/public.pem# 证书私钥配置SSLCertificateKeyFile cert/214750710900222.key# 证书链配置，如果该属性开头有 '#'字符，请删除掉SSLCertificateChainFile cert/chain.pem 重启 Apache。 通过 https 方式访问您的站点,测试站点证书的安装配置 参考1.http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html2.https://imququ.com/post/letsencrypt-certificate.html]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HBase1.2安装配置]]></title>
    <url>%2F2018%2F03%2F20%2FHBase1.2.6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[安装模式Hbase分为三种安装模式：单机模式，伪分布式模式，完全分布式模式 单机模式：单机模式的安装非常简单，几乎不用对安装文件做什么修改就可以使用。单机模式下，HBase并不使用HDFS，因此将安装文件解压后就几乎可以直接运行。 伪分布模式是一个运行在单台机器上的分布式模式。此模式下，HBase所有的守护进程将运行在同一个节点之上，而且需要依赖HDFS，因此在此之前必须保证HDFS已经成功运行。 完全分布式模式是运行在每台机器上，本文采取的就是这种方式。 准备1.选择合适版本选择 Hadoop 版本对HBase部署很关键。下表显示不同HBase支持的Hadoop版本信息。基于HBase版本，应该选择合适的Hadoop版本。可以从hbase官方文档查询支持版本，链接：http://hbase.apache.org/book.html#configuration在浏览器中搜索 Hadoop version support即可 “S” = supported “X” = not supported “NT” = Not tested HBase-1.2.x HBase-1.3.x HBase-2.0.x Hadoop-2.4.x S S X Hadoop-2.5.x S S X Hadoop-2.6.0 X X X Hadoop-2.6.1+ S S S Hadoop-2.7.0 X X X Hadoop-2.7.1+ S S S Hadoop-2.8.0 X X X Hadoop-2.8.1 X X X Hadoop-3.0.0 NT NT NT HBase从官网下载即可，官方提供很多镜像地址，如http://mirror.jax.hugeserver.com/apache/hbase/ 2.环境准备 注意：需要提前对集群配置SSH免密登陆，时间同步，host主机名，java环境 集群机器 IP HostName Master RegionServer 192.168.100.111 mini1 yes no 192.168.100.112 mini2 no yes 192.168.100.113 mini3 no yes 软件环境 系统：CentOS 7.2 Hadoop：2.6.4 ZooKeeper：3.4.10 jdk：1.7 下载和解压整体安装过程务必使用安装hadoop的用户来安装hbase 首先在一台机器上安装配置好，然后分发到集群中其他机器上 12shell&gt; wget http://mirror.jax.hugeserver.com/apache/hbase/1.2.6/hbase-1.2.6-bin.tar.gz # 下载shell&gt; tar -xzvf hbase-1.2.6-bin.tar.gz -C /opt/ # 解压 配置环境变量修改环境变量需要root用户，在最下面增加HBASE的家目录HBASE_HOME1234shell&gt; su - rootshell&gt; echo &quot;HBASE_HOME=/opt/hbase-1.2.6&quot; &gt;&gt; /etc/profileshell&gt; echo &quot;PATH=$PATH:$HBASE_HOME/bin&quot; &gt;&gt; /etc/profileshell&gt; echo &quot;export HBASE_HOME PATH&quot; &gt;&gt; /etc/profile 使环境变量生效1shell&gt; source /etc/profile 修改资源限制HBase 和其他的数据库软件一样会同时打开很多文件。Linux 中默认的ulimit 值是1024，这对HBase 来说太小了。当使用诸如bulkload 这种工具批量导入数据的时候会得到这样的异常信息：java.io.IOException:Too many open files。我们需要改变这个值，注意，这是对操作系统的参数调整，而不是通过HBase 配置文件完成的，我们可以大致估算ulimit 值需要配置为多大。1shell&gt; ulimit -n 10240 修改配置文件hbase 相关的配置主要包括hbase-env.sh、hbase-site.xml、regionservers三个文件（如regionservers没有可以手动创建），都在 $HBASE_HOME/conf 下面 配置hbase-env.sh1shell&gt; vim $HBASE_HOME/conf/hbase-env.sh 1234567\# JDK安装目录 export JAVA_HOME=/opt/jdk1.7.0_80 export JAVA_CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar \# hadoop配置文件的位置 export HBASE_CLASSPATH=/opt/hadoop-2.6.4/etc/hadoop \# 如果使用独立安装的zookeeper这个地方就是false export HBASE_MANAGES_ZK=false 配置hbase-site.xml12345678910111213141516171819202122&lt;configuration&gt; &lt;property&gt; &lt;name&gt;hbase.master.port&lt;/name&gt; #hbase master的端口 &lt;value&gt;60000&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hbase.master.info.port&lt;/name&gt; #hbase web管理的端口 &lt;value&gt;60010&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hbase.rootdir&lt;/name&gt; #hbase共享目录，持久化hbase数据 &lt;value&gt;hdfs://mini1:9000/hbase&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hbase.cluster.distributed&lt;/name&gt; #是否分布式运行，false即为单机 &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt; #zookeeper地址 &lt;value&gt;mini1:2181,mini2:2181,mini3:2181&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 配置regionserversregionservers这个文件内容是regionServer的域名，在1.2.6版本中没有，需要用户在$HBASE_HOME/conf下手动创建 123shell&gt; touch $HBASE_HOME/conf/regionserversshell&gt; echo &quot;mini2&quot; &gt;&gt; $HBASE_HOME/conf/regionserversshell&gt; echo &quot;mini3&quot; &gt;&gt; $HBASE_HOME/conf/regionservers hadoop的hdfs-site.xml和core-site.xml将集群hadoop的这两个配置文件复制到hbase的conf目录下 12shell&gt; cp /opt/hadoop-2.6.4/etc/hadoop/hdfs-site.xml $HBASE_HOME/conf/shell&gt; cp /opt/hadoop-2.6.4/etc/hadoop/core-site.xml $HBASE_HOME/conf/ 分发到其他机器12shell&gt; scp -r /opt/hbase-1.2.6 mini2:/optshell&gt; scp -r /opt/hbase-1.2.6 mini3:/opt 启动HBase强依赖hadoop和zookeeper，所以务必先确保集群的hadoop和zk都正常启动 启动hadoop(mini1) 1shell&gt; /opt/hadoop-2.6.4/sbin/start-all.sh 启动zookeeper（mini, mini2, mini3分别执行） 1shell&gt; /opt/zookeeper-3.4.10/bin/zkServer.sh start 启动HBase（mini1） 一般哪台启动hbase，哪台就是HMaster 1shell&gt; start-hbase.sh 查看进程mini1(master) 12345678910shell&gt; jps1254 DataNode 1550 ResourceManager 3296 Jps 1988 QuorumPeerMain 1387 SecondaryNameNode 1158 NameNode 2950 HMaster # hbase master进程1679 NodeManager mini2,mini3(salve) 123456shell&gt; jps1288 QuorumPeerMain 1148 NodeManager 1791 Jps 1571 HRegionServer # hbase slave进程]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>HBase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7.4 安装MySQL 5.7.21 (通用二进制包)]]></title>
    <url>%2F2018%2F02%2F01%2FCentos7-4-%E5%AE%89%E8%A3%85MySQL-5-7-21-%E9%80%9A%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%2F</url>
    <content type="text"><![CDATA[下载安装包MySQL 官方下载地址：https://dev.mysql.com/downloads/mysql/MySQL 5.7官方安装文档：https://dev.mysql.com/doc/refman/5.7/en/binary-installation.html 本文完全按照官方步骤配置安装选择Linux - generic 64位安装包MySQL 5.7.21 二进制包下载地址：https://dev.mysql.com//Downloads/MySQL-5.7/mysql-5.7.21-linux-glibc2.12-x86_64.tar.gz 1wget --no-check-certificate https://dev.mysql.com//Downloads/MySQL-5.7/mysql-5.7.21-linux-glibc2.12-x86_64.tar.gz 安装依赖包MySQL依赖于libaio 库。如果这个库没有在本地安装，数据目录初始化和后续的服务器启动步骤将会失败。请使用适当的软件包管理器进行安装。例如，在基于Yum的系统上：12shell&gt; yum search libaio shell&gt; yum install libaio 注意SLES 11：从MySQL 5.7.19开始，Linux通用tar包的格式是EL6而不是EL5。以致于MySQL客户端bin / mysql需要libtinfo.so.5。 解决方法是创建软链接，例如64位系统上的ln -s libncurses.so.5.6 /lib64/libtinfo.so.5或32 位系统上的ln -s libncurses.so.5.6 /lib/libtinfo.so.5。 创建一个mysql用户和组12shell&gt; groupadd mysqlshell&gt; useradd -r -g mysql -s /bin/false mysql 注意此用户仅用于运行mysql服务，而不是登录，因此使用useradd -r和-s /bin/false命令选项来创建对服务器主机没有登录权限的用户。 解压到指定目录123shell&gt; tar -zxvf mysql-5.7.21-linux-glibc2.12-x86_64.tar.gz -C /optshell&gt; cd /optshell&gt; mv mysql-5.7.21-linux-glibc2.12-x86_64 mysql-5.7.21 配置环境变量1echo "export PATH=$PATH:/opt/mysql-5.7.21/bin" &gt;&gt; /etc/profile 配置数据库目录数据目录：/opt/mysql-5.7.21/data参数文件my.cnf：/etc/my.cnf错误日志log-error：/opt/mysql-5.7.21/log/mysql_error.log二进制日志log-bin：/opt/mysql-5.7.21/log/mysql_bin.log慢查询日志slow_query_log_file：/opt/mysql-5.7.21/log/mysql_slow_query.log套接字socket文件：/opt/mysql-5.7.21/run/mysql.sockpid文件：/opt/mysql-5.7.21/run/mysql.pid创建目录： 123shell&gt; mkdir -p /opt/mysql-5.7.21/&#123;data,log,etc,run&#125;shell&gt; chown -R mysql:mysql /opt/mysql-5.7.21shell&gt; chmod 750 /opt/mysql-5.7.21/&#123;data,log,etc,run&#125; 配置my.cnf文件在/etc/下创建my.cnf文件，加入如下参数，其他参数根据需要配置（以下配置按默认配置设置） 12shell&gt; touch /etc/my.cnf shell&gt; chown mysql:mysql /etc/my.cnf 12345678910111213141516171819202122232425262728293031323334353637383940414243[client]port = 3306socket = /opt/mysql-5.7.21/run/mysql.sock[mysqld]port = 3306socket = /opt/mysql-5.7.21/run/mysql.sockpid_file = /opt/mysql-5.7.21/run/mysql.piddatadir = /opt/mysql-5.7.21/datadefault_storage_engine = InnoDBmax_allowed_packet = 128Mmax_connections = 2048open_files_limit = 65535skip-name-resolvelower_case_table_names=1character-set-server = utf8mb4collation-server = utf8mb4_unicode_ciinit_connect=&apos;SET NAMES utf8mb4&apos;innodb_buffer_pool_size = 128Minnodb_log_file_size = 128Minnodb_file_per_table = 1innodb_flush_log_at_trx_commit = 0key_buffer_size = 16Mlog-error = /opt/mysql-5.7.21/log/mysql_error.loglog-bin = /opt/mysql-5.7.21/log/mysql_bin.logslow_query_log = 1slow_query_log_file = /opt/mysql-5.7.21/log/mysql_slow_query.loglong_query_time = 5tmp_table_size = 16Mmax_heap_table_size = 16Mquery_cache_type = 0query_cache_size = 0server-id=1 初始化1shell&gt; mysqld --initialize --user=mysql --basedir=/opt/mysql-5.7.21 --datadir=/opt/mysql-5.7.21/data 此时会生成一个临时密码，可以在mysql_error.log文件找到 1shell&gt; grep 'temporary password' /opt/mysql-5.7.21/log/mysql_error.log 生成ssl 1shell&gt; mysql_ssl_rsa_setup --basedir=/opt/mysql-5.7.21 --datadir=/opt/mysql-5.7.21/data/ 配置服务，使用systemctl管理12shell&gt; cd /usr/lib/systemd/systemshell&gt; touch mysqld.service 文件内容如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.## This program is free software; you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation; version 2 of the License.## This program is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the# GNU General Public License for more details.## You should have received a copy of the GNU General Public License# along with this program; if not, write to the Free Software# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA## systemd service file for MySQL forking server#[Unit]Description=MySQL ServerDocumentation=man:mysqld(8)Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.htmlAfter=network.targetAfter=syslog.target[Install]WantedBy=multi-user.target[Service]User=mysqlGroup=mysqlType=forkingPIDFile=/opt/mysql-5.7.21/run/mysql.pid# Disable service start and stop timeout logic of systemd for mysqld service.TimeoutSec=0# Execute pre and post scripts as rootPermissionsStartOnly=true# Needed to create system tables#ExecStartPre=/usr/bin/mysqld_pre_systemd# Start main serviceExecStart=/opt/mysql-5.7.21/bin/mysqld --daemonize --pid-file=/opt/mysql-5.7.21/run/mysql.pid $MYSQLD_OPTS# Use this to switch malloc implementationEnvironmentFile=-/etc/sysconfig/mysql# Sets open_files_limitLimitNOFILE = 65535Restart=on-failureRestartPreventExitStatus=1PrivateTmp=false 让systemctl加载配置服务 123shell&gt; systemctl daemon-reloadshell&gt; systemctl enable mysqld.serviceshell&gt; systemctl is-enabled mysqld 启动MySQL服务1shell&gt; systemctl start mysqld.service MySQL用户初始化重置密码(上一步已经重置过了 这次可以忽略)删除匿名用户关闭root用户的远程登录删除测试数据库 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970shell&gt; /opt/mysql-5.7.21/bin/mysql_secure_installationSecuring the MySQL server deployment.Enter password for user root: # 输入初始化mysql时产生的密码，查看/opt/mysql-5.7.21/log/mysql_error.log 文件The existing password for the user account root has expired. Please set a new password.New password: # 新密码Re-enter new password: # 重新输入新密码VALIDATE PASSWORD PLUGIN can be used to test passwordsand improve security. It checks the strength of passwordand allows the users to set only those passwords which aresecure enough. Would you like to setup VALIDATE PASSWORD plugin?Press y|Y for Yes, any other key for No: Y # 是否启用密码安全验证插件There are three levels of password validation policy:LOW Length &gt;= 8MEDIUM Length &gt;= 8, numeric, mixed case, and special charactersSTRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary filePlease enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 2Using existing password for root.Estimated strength of the password: 100 Change the password for root ? ((Press y|Y for Yes, any other key for No) : N # 是否修改root密码 ... skipping.By default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created for them. This is intended only fortesting, and to make the installation go a bit smoother.You should remove them before moving into a productionenvironment.Remove anonymous users? (Press y|Y for Yes, any other key for No) : Y # 删除匿名用户Success.Normally, root should only be allowed to connect from'localhost'. This ensures that someone cannot guess atthe root password from the network.Disallow root login remotely? (Press y|Y for Yes, any other key for No) : Y # 关闭root用户的远程登录Success.By default, MySQL comes with a database named 'test' thatanyone can access. This is also intended only for testing,and should be removed before moving into a productionenvironment.Remove test database and access to it? (Press y|Y for Yes, any other key for No) : Y # 删除测试数据库 - Dropping test database...Success. - Removing privileges on test database...Success.Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y # 重新加载表Success.All done! 导入时区1shell&gt; mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql 验证安装1shell&gt; mysqladmin version -u root -p 参考1.https://www.jianshu.com/p/0d628b2f74762.https://dev.mysql.com/doc/refman/5.7/en/binary-installation.html]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx服务器安装启动及配置文件详解]]></title>
    <url>%2F2018%2F01%2F30%2FNginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[选择稳定nginx版本centos的yum不提供nginx安装，通过配置官方yum源的方式获取到的也只是源码包。所以我们找到了Nginx官网看下官方提供的安装方式：Nginx源码包下载的官网地址（http://nginx.org/en/download.html）从官网上提供三个类型的版本，分别是Mainline version、Stable version、Legacy versions Mainline version：Mainline 是 Nginx 目前主力在做的版本，可以说是开发版 Stable version：最新稳定版，生产环境上建议使用的版本 Legacy versions：遗留的老版本的稳定版在这里我们选择Stable 版本的 nginx-1.12.2.tar.gz安装环境是CentOS 6.5 安装过程所执行的命令需要root权限，所以我们选择使用root用户安装。安装依赖包和必要的库安装依赖包 1shell&gt; yum -y install gcc gcc-c++ make libtool 这些依赖包是编译所必需的，如果yum上没有的话可以去下载源码来安装 安装必要的库这些库都是nginx中一些功能模块所依赖的，如without-http_gzip_module需要zlib库来构建和运行此模块，http_rewrite_module需要pcre库来构建和运行此模块，http_ssl_module需要OpenSSL库来构建和运行此模块 安装pcre库（版本8.40）123456shell&gt; cd /opt/softwareshell&gt; wget http://ftp.pcre.org/pub/pcre/pcre-8.40.tar.gzshell&gt; tar -zxvf pcre-8.40.tar.gzshell&gt; cd pcre-8.40shell&gt; ./configure --enable-utf8 --enable-unicode-propertiesshell&gt; make &amp;&amp; make install 安装zlib库（版本1.2.11）123456shell&gt; cd /opt/softwareshell&gt; wget http://www.zlib.net/zlib-1.2.11.tar.gzshell&gt; tar -zxvf zlib-1.2.11.tar.gzshell&gt; cd zlib-1.2.11shell&gt; ./configureshell&gt; make &amp;&amp; make install 安装OpenSSL（版本1.0.2k）123456shell&gt; cd /opt/softwareshell&gt; wget http://www.openssl.org/source/old/1.0.2/openssl-1.0.2k.tar.gzshell&gt; tar -zxvf openssl-1.0.2k.tar.gzshell&gt; cd openssl-1.0.2kshell&gt; ./configshell&gt; make &amp;&amp; make install 编译安装Nginxnginx编译选项详解12345shell&gt; cd /optshell&gt; wget http://nginx.org/download/nginx-1.12.2.tar.gzshell&gt; tar -zxvf nginx-1.12.2.tar.gzshell&gt; cd nginx-1.12.2shell&gt; ./configure --help 可以在编译时./configure –help列出大部分常用模块和编译选项，列出的编译选项中以–without开头的都默认安装，以PATH结尾的需要手动指定依赖库源码目录。 ./configure –help–help print this message–prefix=PATH set installation prefix–sbin-path=PATH set nginx binary pathname–with-select_module enable select module–without-select_module disable select module–with-poll_module enable poll module…… 下面是编译选项的说明 --prefix=PATH： 指定nginx的安装目录。默认 /usr/local/nginx --sbin-path=PATH：设置nginx可执行文件的名称。默认情况下，文件指向 安装目录/sbin/nginx --conf-path=PATH：设置nginx.conf配置文件的名称。nginx允许使用不同的配置文件启动，通过在命令行参数中指定它 。默认情况下，文件指向 安装目录/conf/nginx.conf --pid-path=PATH：设置存储主进程ID文件nginx.pid的名称。默认情况下，文件指向 安装目录/logs/nginx.pid --error-log-path=PATH：设置错误，警告和诊断文件的名称。默认情况下，文件指向 安装目录/logs/error.log --http-log-path=PATH：设置HTTP服务器的请求日志文件的名称。默认情况下，文件指向 安装目录/logs/access.log --lock-path=PATH：安装文件锁定，防止安装文件被别人利用，或自己误操作。 --user=nginx：指定程序运行时的非特权用户。安装完成后，可以随时在nginx.conf配置文件更改user。默认用户名为nobody --group=nginx：指定程序运行时的非特权用户所在组名称。默认情况下，组名称设置为非root用户的名称。 --with-http_realip_module 启用ngx_http_realip_module支持（这个模块允许从请求标头更改客户端的IP地址值，默认为关） --with-http_ssl_module ：启用ngx_http_ssl_module支持（使支持https请求，需已安装openssl） --with-http_stub_status_module ：启用ngx_http_stub_status_module支持（获取nginx自上次启动以来的工作状态） --with-http_gzip_static_module ：启用ngx_http_gzip_module支持（该模块同–without-http_gzip_module功能一样） --http-client-body-temp-path=PATH ：设定http客户端请求临时文件路径 --http-proxy-temp-path=PATH：设定http代理临时文件路径 --http-fastcgi-temp-path=PATH：设定http fastcgi临时文件路径 --http-uwsgi-temp-path=PATH：设定http scgi临时文件路径 --with-pcre：设置pcre库的源码路径，如果已通过yum方式安装，使用–with-pcre自动找到库文件。使用--with-pcre=PATH时，需要从PCRE网站下载pcre库的源码（版本8.4）并解压，剩下的就交给Nginx的./configure和make来完成。perl正则表达式使用在location指令和 ngx_http_rewrite_module模块中。 --with-zlib=PATH：指定 zlib（版本1.2.11）的源码解压目录。在默认就启用的网络传输压缩模块ngx_http_gzip_module时需要使用zlib --with-http_ssl_module：使用https协议模块。默认情况下，该模块没有被构建。前提是openssl已安装 --add-module=PATH ： 添加第三方外部模块，如nginx-sticky-module-ng或缓存模块。每次添加新的模块都要重新编译（Tengine可以在新加入module时无需重新编译） 完整编译指令 12345678910111213141516171819shell&gt; ./configure \--prefix=/opt/nginx-1.12.2 \--sbin-path=/opt/nginx-1.12.2/sbin/nginx \--conf-path=/opt/nginx-1.12.2/conf/nginx.conf \--pid-path=/opt/nginx-1.12.2/logs/nginx.pid \--lock-path=/opt/nginx-1.12.2/logs/nginx.lock \--error-log-path=/opt/nginx-1.12.2/logs/error.log \--http-log-path=/opt/nginx-1.12.2/logs/access.log \--user=nginx \--group=nginx \--with-poll_module \--with-http_realip_module \--with-http_ssl_module \--with-http_stub_status_module \--with-http_gzip_static_module \--with-zlib=/opt/software/zlib-1.2.11 \--with-pcre=/opt/software/pcre-8.40 \--with-openssl=/opt/software/openssl-1.0.2k \--with-pcre-jit nginx安装1shell&gt; make &amp;&amp; make install 启动Nginx检查配置文件是否正确注意，启动前和修改了配置文件nginx.conf后最好先检查一下修改过的配置文件是否正确，以免重启后Nginx出现错误影响服务器稳定运行。判断Nginx配置是否正确命令如下：1shell&gt; /opt/nginx-1.12.2/sbin/nginx -t 启动12shell&gt; groupadd nginx #创建nginx用户组shell&gt; useradd -r -g nginx -s /bin/false nginx 1shell&gt; /opt/nginx-1.12.2/sbin/nginx # 默认配置文件 conf/nginx.conf， -c指定其他配置文件 启动成功会在logs目录中出现nginx.pid文件，即nginx进程号若未成功可以查看logs目录下的error.log文件查看报错日志 平滑重启nginx如果更改了配置就要重启Nginx，要先关闭Nginx再打开？不是的，可以向Nginx 发送信号，平滑重启。1shell&gt; /opt/nginx-1.12.2/sbin/nginx -s reload 或 1shell&gt; kill -HUP 进程号或进程号文件路径 停止Nginx停止操作是通过向nginx进程发送信号来进行的步骤1：查询nginx主进程号 1shell&gt; ps -ef | grep nginx 步骤2：发送信号1.正常关闭 1shell&gt; kill -QUIT 主进程号 2.快速停止Nginx： 1shell&gt; kill -TERM 主进程号 3.强制停止Nginx： 1shell&gt; pkill -9 nginx Nginx服务自启把nginx添加到系统服务中，使其可以使用service nginx start/stop/restart等。创建一个名称为nginx的脚本，添加如下内容，更改里面的nginx路径和配置文件路径，给执行权限。 如果想添加脚本用service启动，必须要脚本里面包含这2行12# chkconfig: - 85 15# description: nginx is a World Wide Web server. It is used to serve 以下是写好的脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293#!/bin/sh# chkconfig: - 85 15# description: nginx is a World Wide Web server. It is used to serve# description: Nginx is an HTTP(S) server, HTTP(S) reverse \# proxyand IMAP/POP3 proxy server# processname: nginx# config: /etc/nginx/nginx.conf# config: /etc/sysconfig/nginx# pidfile: /var/run/nginx.pid# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ "$NETWORKING" = "no" ] &amp;&amp; exit 0nginx="/usr/local/nginx-1.12.2/sbin/nginx"prog=$(basename $nginx)NGINX_CONF_FILE="/usr/local/nginx-nginx-1.12.2/conf/nginx.conf"[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginxlockfile=/var/lock/subsys/nginxstart() &#123; [ -x $nginx ] || exit 5 [ -f $NGINX_CONF_FILE ] || exit 6 echo -n $"Starting $prog: " daemon $nginx -c $NGINX_CONF_FILE retval=$? echo [ $retval -eq 0 ] &amp;&amp; touch $lockfile return $retval&#125;stop() &#123; echo -n $"Stopping $prog: " killproc $prog -QUIT retval=$? echo [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile return $retvalkillall -9 nginx&#125;restart() &#123; configtest || return $? stop sleep 1 start&#125;reload() &#123; configtest || return $? echo -n $"Reloading $prog: " killproc $nginx -HUPRETVAL=$? echo&#125;force_reload() &#123; restart&#125;configtest() &#123;$nginx -t -c $NGINX_CONF_FILE&#125;rh_status() &#123; status $prog&#125;rh_status_q() &#123; rh_status &gt;/dev/null 2&gt;&amp;1&#125;case "$1" in start) rh_status_q &amp;&amp; exit0 $1 ;; stop) rh_status_q || exit 0 $1 ;; restart|configtest) $1 ;; reload) rh_status_q || exit 7 $1 ;; force-reload) force_reload ;; status) rh_status ;; condrestart|try-restart) rh_status_q || exit 0 ;; *) echo $"Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;" exit 2esac 1234shell&gt; cp nginx /etc/init.d/shell&gt; chmod 755 /etc/init.d/nginxshell&gt; chkconfig --add nginxshell&gt; chkconfig -level 35 nginx 测试启动 123shell&gt; service nginx startshell&gt; service nginx stopshell&gt; service nginx reload 参考： http://nginx.org/en/docs/configure.htmlhttp://www.jianshu.com/p/d5114a2a2052http://seanlook.com/2015/05/17/nginx-install-and-config/http://www.ttlsa.com/nginx/nginx-configure-descriptions/]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
</search>
